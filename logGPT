#!/data/data/com.termux/files/home/.termux/tasker/logGPT/venv/bin/python

import openai
import argparse
import sys
import binascii
from pathlib import Path

def hex_2_str(hex: str):
    return binascii.unhexlify(hex).decode('utf-8')

def str_2_hex(text: str):
    return binascii.hexlify(text.encode('utf-8')).decode()

def chat(role: str, content: str):
    return {"role": role, "content": content}

with open("api.key", "r") as f:
    api_key = f.read()

openai.api_key = api_key

parser = argparse.ArgumentParser(description="logs contact message and chatgpt responce to file")
parser.add_argument("--contact", type=str, required=True)
parser.add_argument("--body", type=str, required=True)
parser.add_argument("--system", type=str, default="you are a helpful assistant.", required=False)
parser.add_argument("--clear_history", action="store_true")
args = parser.parse_args()
contact, body = args.contact, args.body

chat_dir = Path("/data/data/com.termux/files/home/.termux/tasker/logGPT/sessions")
chat_file = chat_dir / f"{contact}.session"

def dialog(role: str, content: str):
    return f"{role}:{str_2_hex(content)}\n"

# initial session file
if not chat_file.exists() or args.clear_history:
    with open(chat_file, "w") as f:
        f.write(dialog("system", args.system))

# load history
with open(chat_file, 'r') as f:
    history = f.read().strip()

# format istory file
history = [chat(user, hex_2_str(body)) for line in history.split("\n") for user, body in [line.split(":", 1)]]
messages = [*history[-20:], chat("user", body)]

# for message in messages:
#     print(f"{message['role']}: {message['content']}")

# send request
try:
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
    )
except Exception as e:
    print(e)
    sys.exit(1)

# parse return
response_body = response['choices'][0]['message']['content']

# save to history
with open(chat_file, "a") as f:
    f.write(dialog("user", body))
    f.write(dialog("assistant", response_body))

print(response_body)



